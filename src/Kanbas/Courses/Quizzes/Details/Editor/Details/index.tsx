import React, { useEffect, useState, useRef } from 'react';
import { Link, useLocation, useParams } from 'react-router-dom';
import QuizNav from '../Nav';
import { findQuizById, updateQuiz } from "../../../client";
import { Quiz } from '../../../types/types';
import { Editor } from '@tinymce/tinymce-react';
import { calculateTotalPoints } from '../../../utils';


// This is quiz Editor screen generated by copliot for now
export function QuizEditor() {
    const [quiz, setQuiz] = useState<Quiz>(null as any);
    const [totalPoints, setTotalPoints] = useState(0);
    const { quizId } = useParams();
    // defines path to return to after certain buttons are hit
    const { pathname } = useLocation();
    var quizDetailsScreen = pathname.substring(0, pathname.lastIndexOf("/"));
    quizDetailsScreen = quizDetailsScreen.substring(0, quizDetailsScreen.lastIndexOf("/"));
    var quizListScreen = quizDetailsScreen.substring(0, quizDetailsScreen.lastIndexOf("/"));

    // Everything below handles updates to quiz features
    const handleQuizTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, title: e.target.value });
    };

    const handleQuizTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setQuiz({ ...quiz, quizType: e.target.value });
    };

    const handleAssGroupChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setQuiz({ ...quiz, assignmentGroup: e.target.value });
    };

    const handleShuffleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.shuffleAnswers;
        setQuiz({ ...quiz, shuffleAnswers: sa });
    };

    const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, timeLimit: Number(e.target.value) });
    };

    const handleMultAttemptsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.multipleAttempts;
        setQuiz({ ...quiz, multipleAttempts: sa });
    };

    const handleShowAnsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        var sa = quiz.showCorrectAnswers;
        if (sa === 'true') {
            sa = 'false';
        } else {
            sa = 'true';
        }

        setQuiz({ ...quiz, showCorrectAnswers: sa });
    };

    const handleAccessCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, accessCode: e.target.value });
    };

    const handleOQaaTChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.oneQuestionAtATime;
        setQuiz({ ...quiz, oneQuestionAtATime: sa });
    };

    const handleWebcamChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.webcamRequired;
        setQuiz({ ...quiz, webcamRequired: sa });
    };

    const handleLQAAChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.lockQuestionsAfterAnswering;
        setQuiz({ ...quiz, lockQuestionsAfterAnswering: sa });
    };
    const formatDateForInput = (dateString: string) => {
        const date = new Date(dateString); // Create a new Date object
        const formattedDate = date.toISOString().substring(0, 16); // "YYYY-MM-DDTHH:MM"
        return formattedDate;
    };

    const handleDueDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, dueDate: formatDateForInput(e.target.value) });
    };

    const handleAvailableDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, availableDate: formatDateForInput(e.target.value) });
    };

    const handleUntilDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, untilDate: formatDateForInput(e.target.value) });
    };

    const handleEditorChange = (content: any, editor: any) => {
        setQuiz({ ...quiz, description: content });
    };


    // when update button is hit, this code updates the database
    const handleupdateQuiz = async (quiz: Quiz) => {
        try {
            await updateQuiz(quiz);
        } catch (err) {
            console.log(err);
        }
    };

    // Toggles Publish and then updates quiz (used for Save and Publish Button)
    const publishAndUpdate = () => {
        const updatedQuiz = { ...quiz, published: true };
        setQuiz(updatedQuiz);
        handleupdateQuiz(updatedQuiz);
    }
    
    const noPublishAndUpdate = () => {
        handleupdateQuiz(quiz);
    }

    const fetchQuizDetails = async () => {
        try {
            const quizData = await findQuizById(quizId);
            setQuiz(quizData);
            if (quizData.questions) {
                const total = calculateTotalPoints(quizData.questions);
                setTotalPoints(total);
            }
        } catch (error) {
            console.error('Failed to fetch quiz:', error);
        }
    };

    useEffect(() => {
        fetchQuizDetails();
    }, [quizId]);

    if (!quiz) {
        return <div>Loading quiz details...</div>;
    }

    return (
        <div>
            <QuizNav />
            <h1>Quiz Editor</h1>
            <label htmlFor="quizTitle">Quiz Title:</label>
            <br />
            <input className='enter-box' type="text" id="quizTitle" value={quiz.title} onChange={handleQuizTitleChange} />
            <p>Quiz Instructions:</p>
            <Editor
                apiKey='ayfauai55c5w2b1fo820wvi93k42dh0irg5jz7qz9ai3kdw2'
                init={{
                    plugins: 'autolink markdown lists link image media table wordcount',
                    toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | numlist bullist | link image media | table | removeformat',
                    height: 400,
                }}
                value={quiz.description}
                onEditorChange={handleEditorChange}
            />
            <br />
            <table className='details-table'>
                <tbody>
                    <tr className='detail-row'>
                        <td className='detail-type'>
                            <label htmlFor="quizType">Quiz Type:</label>
                        </td>
                        <td>
                            <select className='enter-box' id="quizType" value={quiz.quizType} onChange={handleQuizTypeChange}>
                                <option value='Graded Quiz'>Graded Quiz</option>
                                <option value='Practice Quiz'>Practice Quiz</option>
                                <option value='Graded Survey'>Graded Survey</option>
                                <option value='Ungraded Survey'>Ungraded Survey</option>
                            </select>
                        </td>
                    </tr>
                    <tr className='detail-row'>
                        <td className='detail-type'>
                            <label htmlFor="assignmentGroup">Assignment Type:</label>
                        </td>
                        <td>
                            <select className='enter-box' id="assignmentGroup" value={quiz.assignmentGroup} onChange={handleAssGroupChange}>
                                <option value="Quizzes">Quizzes</option>
                                <option value="Exams">Exams</option>
                                <option value="Assignments">Assignments</option>
                                <option value="Project">Project</option>
                            </select>
                        </td>
                    </tr>
                    <tr className='detail-row'>
                        <td className='detail-type'>
                            <label htmlFor='points'>Points: {totalPoints}</label>
                        </td>

                    </tr>
                    <tr className='detail-row'>
                        <td className='detail-type'>
                            <label htmlFor="accessCode">Access Code:</label>
                        </td>
                        <td>
                            <input className='enter-box' type="text" id="accessCode" value={quiz.accessCode} onChange={handleAccessCodeChange} />
                        </td>
                    </tr>
                </tbody>
            </table>

            <br />
            <p>Other Options:</p>
            <div className='option-container'>
                <label htmlFor="shuffle">Shuffle Answers?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleShuffleChange} name="shuffleAnswers" id="shuffle" checked={quiz.shuffleAnswers ? true : false} />

                <br />
                <label htmlFor='time'>Time Limit (Minutes):</label>
                <input className='enter-box time' type='number' id='time' onChange={handleTimeChange} value={quiz.timeLimit} />

                <br />
                <label htmlFor="multAttempts">Multiple Attempts?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleMultAttemptsChange} name="multAttempts" id="multAttempts" checked={quiz.multipleAttempts ? true : false} />

                <br />
                <label htmlFor="multAttempts">Show Correct Answers Upon Completion?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleShowAnsChange} name="showAns" id="showAns" checked={quiz.showCorrectAnswers === 'true' ? true : false} />

                <br />
                <label htmlFor="OQaaT">One Question at a Time?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleOQaaTChange} name="OQaaT" id="OQaaT" checked={quiz.oneQuestionAtATime ? true : false} />

                <br />
                <label htmlFor="webcam">Webcam Required?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleWebcamChange} name="webcam" id="webcam" checked={quiz.webcamRequired ? true : false} />

                <br />
                <label htmlFor="LQAA">Lock Questions After Answering?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleLQAAChange} name="LQAA" id="LQAA" checked={quiz.lockQuestionsAfterAnswering ? true : false} />

            </div>
            <div className='option-container'>
                <label htmlFor="dueDate">Due Date:</label>
                <input className='enter-box' type="datetime-local" id="dueDate" onChange={handleDueDateChange} name="dueDate" value={formatDateForInput(quiz.dueDate)} />

                <br />
                <br />
                <label htmlFor="availableDate">Date When Available:</label>
                <input className='enter-box' type="datetime-local" id="availableDate" onChange={handleAvailableDateChange} name="availableDate" value={formatDateForInput(quiz.availableDate)} />

                <br />
                <br />
                <label htmlFor="untilDate">Available Until:</label>
                <input className='enter-box' type="datetime-local" id="untilDate" onChange={handleUntilDateChange} name="untilDate" value={formatDateForInput(quiz.untilDate)} />
            </div>

            <hr className='hr-save-bar' />

            <div className='save-bar'>
                <Link to={quizListScreen}>
                    <button className="btn-link" >Cancel</button>
                </Link>
                <Link to={quizListScreen}>
                    <button className="btn-link" onClick={publishAndUpdate}>Save and Publish</button>
                </Link>

                <Link to={quizDetailsScreen}>
                    <button className="btn-link btn-save" onClick={noPublishAndUpdate}>Save</button>
                </Link>
            </div>

        </div>
    );
};

export default QuizEditor;