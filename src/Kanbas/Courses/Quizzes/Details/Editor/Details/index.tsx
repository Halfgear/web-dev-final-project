import React, { useEffect, useState } from 'react';
import { Link, useLocation, useParams } from 'react-router-dom';
import QuizNav from '../Nav';
import * as client from "../../../client";
import { Quiz } from '../../../types/types';
import '../../index.css';
import { formatDate } from '../../../utils';

interface QuizEditorProps {
    // Add any necessary props here
}
// This is quiz Editor screen generated by copliot for now
const QuizEditor: React.FC<QuizEditorProps> = () => {
    const [quiz, setQuiz] = useState<Quiz>(null as any);
    const { quizId } = useParams();
    const API_BASE = process.env.REACT_APP_API_BASE;

    // Everything below handles updates to quiz features
    const handleQuizTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, title: e.target.value });
    };

    const handleQuizTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setQuiz({ ...quiz, quizType: e.target.value });
    };

    const handlePointTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, points: Number(e.target.value) });
    };

    const handleAssGroupChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setQuiz({ ...quiz, assignmentGroup: e.target.value });
    };

    const handleShuffleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.shuffleAnswers;
        setQuiz({ ...quiz, shuffleAnswers: sa });
    };

    const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, timeLimit: Number(e.target.value) });
    };

    const handleMultAttemptsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.multipleAttempts;
        setQuiz({ ...quiz, multipleAttempts: sa });
    };

    const handleShowAnsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        var sa = quiz.showCorrectAnswers;
        if (sa === 'true') {
            sa = 'false';
        } else {
            sa = 'true';
        }

        setQuiz({ ...quiz, showCorrectAnswers: sa });
    };

    const handleAccessCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, accessCode: e.target.value });
    };

    const handleOQaaTChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.oneQuestionAtATime;
        setQuiz({ ...quiz, oneQuestionAtATime: sa });
    };

    const handleWebcamChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.webcamRequired;
        setQuiz({ ...quiz, webcamRequired: sa });
    };

    const handleLQAAChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const sa = !quiz.lockQuestionsAfterAnswering;
        setQuiz({ ...quiz, lockQuestionsAfterAnswering: sa });
    };

    const handleDueDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, dueDate: e.target.value });
    };

    const handleAvailableDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, availableDate: e.target.value });
    };

    const handleUntilDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuiz({ ...quiz, untilDate: e.target.value });
    };

    // when update button is hit, this code updates the database
    const updateQuiz = async () => {
        try {
            const status = await client.updateQuiz(quiz);
        } catch (err) {
            console.log(err);
        }
    };

    // Toggles Publish and then updates quiz (used for Save and Publish Button)
    const publishAndUpdate = () => {
        setQuiz({ ...quiz, published: true });
        console.log(quiz.published);
        updateQuiz();
    }

    // defines path to return to after certain buttons are hit
    const { pathname } = useLocation();
    var quizDetailsScreen = pathname.substring(0, pathname.lastIndexOf("/"));
    quizDetailsScreen = quizDetailsScreen.substring(0, quizDetailsScreen.lastIndexOf("/"));
    var quizListScreen = quizDetailsScreen.substring(0, quizDetailsScreen.lastIndexOf("/"));

    useEffect(() => {
        // Fetch quiz details from API using quizId
        // Replace the API_URL with your actual API endpoint
        fetch(`${API_BASE}/api/quizzes/${quizId}`)
            .then((response) => response.json())
            .then((data) => setQuiz(data))
            .catch((error) => console.error(error));

    }, [API_BASE, quizId]);

    if (!quiz) {
        return <div>Loading quiz details...</div>;
    }

    return (
        <div>
            <QuizNav />
            <h1>Quiz Editor</h1>
            <label htmlFor="quizTitle">Quiz Title:</label>
            <br />
            <input className='enter-box' type="text" id="quizTitle" value={quiz.title} onChange={handleQuizTitleChange} />

            <p>Quiz Instructions:</p>
            <textarea></textarea>

            <br />
            <table className='details-table'>
                <tr className='detail-row'>
                    <td className='detail-type'>
                        <label htmlFor="quizType">Quiz Type:</label>
                    </td>
                    <td>
                        <select className='enter-box' id="quizType" onChange={handleQuizTypeChange}>
                            <option selected={quiz.quizType === 'Graded Quiz' ? true : false} value="Graded Quiz">Graded Quiz</option>
                            <option selected={quiz.quizType === 'Practice Quiz' ? true : false} value="Practice Quiz">Practice Quiz</option>
                            <option selected={quiz.quizType === 'Graded Survey' ? true : false} value="Graded Survey">Graded Survey</option>
                            <option selected={quiz.quizType === 'Ungraded Survey' ? true : false} value="Ungraded Survey">Ungraded Survey</option>
                        </select>
                    </td>
                </tr>
                <tr className='detail-row'>
                    <td className='detail-type'>
                        <label htmlFor="assignmentGroup">Assignment Type:</label>
                    </td>
                    <td>
                        <select className='enter-box' id="assignmentGroup" onChange={handleAssGroupChange}>
                            <option selected={quiz.assignmentGroup === 'Quizzes' ? true : false} value="Quizzes">Quizzes</option>
                            <option selected={quiz.assignmentGroup === 'Exams' ? true : false} value="Exams">Exams</option>
                            <option selected={quiz.assignmentGroup === 'Assignments' ? true : false} value="Assignments">Assignments</option>
                            <option selected={quiz.assignmentGroup === 'Project' ? true : false} value="Project">Project</option>
                        </select>
                    </td>
                </tr>
                <tr className='detail-row'>
                    <td className='detail-type'>
                        <label htmlFor='points'>Points:</label>
                    </td>
                    <td>
                        <input className='enter-box' type='number' id='points' onChange={handlePointTypeChange} value={quiz.points} />
                    </td>
                </tr>
                <tr className='detail-row'>
                    <td className='detail-type'>
                        <label htmlFor="accessCode">Access Code:</label>
                    </td>
                    <td>
                        <input className='enter-box' type="text" id="accessCode" value={quiz.accessCode} onChange={handleAccessCodeChange} />
                    </td>
                </tr>
            </table>

            <br />
            <p>Other Options:</p>
            <div className='option-container'>
                <label htmlFor="shuffle">Shuffle Answers?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleShuffleChange} name="shuffleAnswers" id="shuffle" checked={quiz.shuffleAnswers ? true : false} />

                <br />
                <label htmlFor='time'>Time Limit (Minutes):</label>
                <input className='enter-box time' type='number' id='time' onChange={handleTimeChange} value={quiz.timeLimit} />

                <br />
                <label htmlFor="multAttempts">Multiple Attempts?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleMultAttemptsChange} name="multAttempts" id="multAttempts" checked={quiz.multipleAttempts ? true : false} />

                <br />
                <label htmlFor="multAttempts">Show Correct Answers Upon Completion?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleShowAnsChange} name="showAns" id="showAns" checked={quiz.showCorrectAnswers === 'true' ? true : false} />

                <br />
                <label htmlFor="OQaaT">One Question at a Time?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleOQaaTChange} name="OQaaT" id="OQaaT" checked={quiz.oneQuestionAtATime ? true : false} />

                <br />
                <label htmlFor="webcam">Webcam Required?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleWebcamChange} name="webcam" id="webcam" checked={quiz.webcamRequired ? true : false} />

                <br />
                <label htmlFor="LQAA">Lock Questions After Answering?</label>
                <input className='enter-box checkbox' type="checkbox" onChange={handleLQAAChange} name="LQAA" id="LQAA" checked={quiz.lockQuestionsAfterAnswering ? true : false} />

            </div>
            <div className='option-container'> 
                <label htmlFor="dueDate">Due Date:</label>
                <input className='enter-box' type="datetime-local" id="dueDate" onChange={handleDueDateChange} name="dueDate" value={quiz.dueDate} />

                <br />
                <br />
                <label htmlFor="availableDate">Date When Available:</label>
                <input className='enter-box' type="datetime-local" id="availableDate" onChange={handleAvailableDateChange} name="availableDate" value={quiz.availableDate} />

                <br />
                <br />
                <label htmlFor="untilDate">Available Until:</label>
                <input className='enter-box' type="datetime-local" id="untilDate" onChange={handleUntilDateChange} name="untilDate" value={quiz.untilDate} />
            </div>

            <hr className='hr-save-bar' />

            <div className='save-bar'>
                <Link to={quizListScreen}>
                    <button className="btn-link" >Cancel</button>
                </Link>
                {/**
                 * ADD PUBLISH FEATURE BELOW
                 */}
                <Link to={quizListScreen}>
                    <button className="btn-link" onClick={publishAndUpdate}>Save and Publish</button>
                </Link>

                <Link to={quizDetailsScreen}>
                    <button className="btn-link btn-save" onClick={updateQuiz}>Save</button>
                </Link>



            </div>

        </div>
    );
};

export default QuizEditor;