import React, { useEffect, useState } from 'react';
import { Link, useLocation, useParams } from 'react-router-dom';
import QuizNav from '../Nav';
import { findQuizById, updateQuiz } from '../../../client';
import { Question, Quiz } from '../../../types/types';
import { FaTrash, FaTrashAlt } from 'react-icons/fa';
import { Editor } from '@tinymce/tinymce-react';

// This is quiz Editor screen generated by copliot for now
export function QuestionEditor() {
    const [quiz, setQuiz] = useState<Quiz>(null as any);
    const { quizId } = useParams();

    const [quizTitle, setQuizTitle] = useState('');
    const [questions, setQuestions] = useState([]);

    const handleQuizTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuizTitle(e.target.value);
        setQuiz({ ...quiz, title: e.target.value });
    };

    const handleQuestionChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
        const updatedQuestions: string[] = [...questions];
        updatedQuestions[index] = e.target.value;
        // setQuestions(updatedQuestions);
    };

    const addQuestion = () => {
        // setQuestions([...questions, '']);
    };

    const removeQuestion = (index: number) => {
        const updatedQuestions = [...questions];
        updatedQuestions.splice(index, 1);
        setQuestions(updatedQuestions);
    };

    const handleUpdateQuiz = async () => {
        try {
            const status = await updateQuiz(quiz);
        } catch (err) {
            console.log(err);
        }
    };

    const handleEditorChange = (content: any, editor: any) => {
        setQuiz({ ...quiz, description: content });
    };

    const questionHeadRender = (question: Question) => {
        return <div>
            <div className='question-header'>
                <input className='enter-box' type="text" id="title" value={question.title} />
                <select className='enter-box' id="questionType">
                    <option selected={question.question_type === 1 ? true : false} value="Mult">Multiple Choice</option>
                    <option selected={question.question_type === 2 ? true : false} value="TF">True/False</option>
                    <option selected={question.question_type === 3 ? true : false} value="FillInBlank">Fill in the Blank</option>
                </select>
                <div className='float-end'>
                    pts: <input className='enter-box point' type='number' id='points' min={0} defaultValue={question.points} />
                </div>

            </div>

            <div className='question-body'>
                <br />
                <Editor
                    apiKey='ayfauai55c5w2b1fo820wvi93k42dh0irg5jz7qz9ai3kdw2'
                    init={{
                        plugins: 'autolink markdown lists link image media table wordcount',
                        toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | numlist bullist | link image media | table | removeformat',
                        height: 200,
                    }}
                    value={question.description}
                    onEditorChange={handleEditorChange}
                />
                {questionRender(question)}

                <div className='save-bar'>
                    <div>
                        <button>Cancel</button>
                        <button className='btn-save q-btn'>Update Question</button>
                    </div>
                </div>
            </div>

        </div>
    }

    const questionRender = (question: Question) => {
        switch (question.question_type) {
            // Multiple Choice
            case 1:
                return <div className='ans-container'>
                    Answers: {question.answers.map((answer, index) => (
                        <div className='mult-choice' key={index}>
                            <input defaultChecked={question.correct.includes(answer) ? true : false} type='radio' name={question._id} />
                            <label className='mult-choice-label' htmlFor={question._id}>
                                {question.correct.includes(answer) ? (<text className='correct'>Correct Answer: </text>)
                                    : (<text>Possible Answer: </text>)}
                                <input className='enter-box mult-choice-ans' type="text" id="title" defaultValue={String(answer)} />
                            </label>
                            <button className='btn-answer'><FaTrashAlt /></button>
                        </div>
                    ))}

                    <button className='btn-answer'>+ New Answer</button>

                </div>

            // True or False
            case 2:
                return <div className='ans-container'>
                    Answers:

                    <div className='mult-choice'>
                        <div>
                            <input defaultChecked={question.correct.includes('true') ? true : false} type='radio' name={question._id} />
                            <label className='mult-choice-label' htmlFor={question._id}>
                                {question.correct.includes('true') ? (<text className='correct'>True</text>)
                                    : (<text>True</text>)}
                            </label>
                        </div>

                        <div>
                            <input defaultChecked={question.correct.includes('false') ? true : false} type='radio' name={question._id} />
                            <label className='mult-choice-label' htmlFor={question._id}>
                                {question.correct.includes('false') ? (<text className='correct'>False</text>)
                                    : (<text>False</text>)}
                            </label>
                        </div>
                    </div>
                </div>

            // Fill in the Blank
            case 3:
                return <div className='ans-container'>
                    Possible Correct Answers: {question.correct.map((answer, index) => (
                        <div key={index}>
                            {index + 1}
                            <input className='enter-box mult-choice-ans' type="text" id="title" defaultValue={String(answer)} />
                            <button className='btn-answer'><FaTrashAlt /></button>
                        </div>
                    ))}

                    <button className='btn-answer'>+ New Answer</button>
                </div>

            default:
                return
        }
    }

    const { pathname } = useLocation();

    useEffect(() => {
        const fetchQuiz = async () => {
            try {
                const quizData = await findQuizById(quizId); // Assume this is an asynchronous function
                setQuiz(quizData);
            } catch (err) {
                console.error('Error fetching quiz:', err);
            }
        };

        fetchQuiz(); // Call the asynchronous function
    }, [quizId]);

    if (!quiz) {
        return <div>Loading quiz details...</div>;
    }

    return (
        <div>
            <QuizNav />
            <h1>Question Editor</h1>

            <button className='btn-link' onClick={addQuestion}>Add Question</button>

            <button className='btn-link btn-save mult-choice-label' onClick={handleUpdateQuiz}>Update Quiz</button>

            {quiz.questions.map((question, index) => (
                <div key={index} className='question-container'>

                    <h1>Question {index + 1}:</h1>

                    {questionHeadRender(question)}

                </div>
            ))}
        </div>
    );
};

export default QuestionEditor;