import React, { useEffect, useState } from 'react';
import { Link, useLocation, useParams } from 'react-router-dom';
import QuizNav from '../Nav';
import * as client from "../../../client";
import { Quiz } from '../../../types/types';

interface QuestionEditorProps {
    // Add any necessary props here
}
// This is quiz Editor screen generated by copliot for now
const QuestionEditor: React.FC<QuestionEditorProps> = () => {
    const [quiz, setQuiz] = useState<Quiz>(null as any);
    const { quizId } = useParams();
    const API_BASE = process.env.REACT_APP_API_BASE;

    const [quizTitle, setQuizTitle] = useState('');
    const [questions, setQuestions] = useState([] as any);

    const handleQuizTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuizTitle(e.target.value);
        setQuiz({...quiz, title: e.target.value});
    };

    const handleQuestionChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
        const updatedQuestions: string[] = [...questions];
        updatedQuestions[index] = e.target.value;
        // setQuestions(updatedQuestions);
    };

    const addQuestion = () => {
        // setQuestions([...questions, '']);
    };

    const removeQuestion = (index: number) => {
        const updatedQuestions = [...questions];
        updatedQuestions.splice(index, 1);
        setQuestions(updatedQuestions);
    };

    const updateQuiz = async () => {
        try {
            const status = await client.updateQuiz(quiz);
        } catch (err) {
            console.log(err);
        }
    };

    const { pathname } = useLocation();

    useEffect(() => {
        // Fetch quiz details from API using quizId
        // Replace the API_URL with your actual API endpoint
        fetch(`${API_BASE}/api/quizzes/${quizId}`)
            .then((response) => response.json())
            .then((data) => setQuiz(data))
            .catch((error) => console.error(error));

    }, [API_BASE, quizId]);

    if (!quiz) {
        return <div>Loading quiz details...</div>;
    }
    
    return (
        <div>
            <QuizNav />
            <h1>Question Editor</h1>
            <label htmlFor="quizTitle">Quiz Title:</label>
            <input type="text" id="quizTitle" placeholder={quiz.title} value={quiz.title} onChange={handleQuizTitleChange} />

            <h2>Quiz Info:</h2>
            
            {quiz.questions.map((question, index) => (
                <div key={index}>
                    <input type="text" value={question.description} onChange={(e) => handleQuestionChange(index, e)} />
                    <button onClick={() => removeQuestion(index)}>Remove</button>
                </div>
            ))}

            <button onClick={addQuestion}>Add Question</button>

            <button onClick={updateQuiz}>Update Quiz</button>
        </div>
    );
};

export default QuestionEditor;